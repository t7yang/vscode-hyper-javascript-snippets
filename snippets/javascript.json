{
  "var assignment": {
    "prefix": "va",
    "body": "var ${1} = ${0}"
  },
  "let assignment (ES2015)": {
    "prefix": "la",
    "body": "let ${1} = ${0}"
  },
  "const assignment (ES2015)": {
    "prefix": "ca",
    "body": "const ${1} = ${0}"
  },
  "var destructuring assignment (ES2015)": {
    "prefix": "vad",
    "body": "var ${0:dest} = ${1}"
  },
  "let destructuring assignment (ES2015)": {
    "prefix": "lad",
    "body": "let ${0:dest} = ${1}"
  },
  "const destructuring assignment (ES2015)": {
    "prefix": "cad",
    "body": "const ${0:dest} = ${1}"
  },

  "if statement": {
    "prefix": "if",
    "body": "if (${1}) ${0}"
  },
  "else statement": {
    "prefix": "el",
    "body": "else ${0}"
  },
  "if/else statement": {
    "prefix": "ifel",
    "body": "if (${1}) ${2} else ${0}"
  },
  "else if statement": {
    "prefix": "elif",
    "body": "else if (${1}) ${0}"
  },
  "ternary operator": {
    "prefix": "ter",
    "body": "${1} ? ${2} : ${0}"
  },
  "switch case": {
    "prefix": "sw",
    "body": "switch (${1}) {\n\tcase ${2} : $0\n\tdefault: ${0}\n}"
  },
  "case": {
    "prefix": "cas",
    "body": "case ${1} : ${0}"
  },

  "for loop": {
    "prefix": "fo",
    "body": "for (${1} ; ${2} ; ${3}) ${0}"
  },
  "for in loop": {
    "prefix": "foi",
    "body": "for (const ${1} in ${2}) {\n\tif (${2}.hasOwnProperty(${1})) {\n\t\t${0}\n\t}\n}"
  },
  "for of loop (ES2015)": {
    "prefix": "fof",
    "body": "for (const ${1} of ${2}) ${0}"
  },
  "for await of loop (ES2018)": {
    "prefix": "foa",
    "body": "for await (const ${1} of ${2}) ${0}"
  },
  "while loop": {
    "prefix": "wh",
    "body": "while (${1}) ${0}"
  },
  "try/catch": {
    "prefix": "tc",
    "body": "try {${1}} catch ${2} {${0}}"
  },
  "try/finally": {
    "prefix": "tf",
    "body": "try {${1}} finally {${0}}"
  },
  "try/catch/finally": {
    "prefix": "tcf",
    "body": "try {${1}} catch ${2} {${3}} finally {${0}}"
  },

  "anonymous function": {
    "prefix": "f",
    "body": "function (${1}) {${0}}"
  },
  "function": {
    "prefix": "fn",
    "body": "function ${1}(${2}) {${0}}"
  },
  "async anonymous function": {
    "prefix": "fa",
    "body": "async function (${1}) {${0}}"
  },
  "async function": {
    "prefix": "fna",
    "body": "async function ${1}(${2}) {${0}}"
  },
  "arrow function (ES2015)": {
    "prefix": "af",
    "body": "(${1}) => ${0}"
  },
  "async arrow function (ES2015)": {
    "prefix": "afa",
    "body": "async (${1}) => ${0}"
  },
  "immediately-invoked function expression (IIFE)": {
    "prefix": "iife",
    "body": "(${2})(${1})${0}"
  },

  "sequence of 0..n": {
    "prefix": "seq",
    "body": "[...Array(${1:length}).keys()]${0}"
  },

  "object literal": {
    "prefix": "ol",
    "body": "{ ${1}: ${0} }"
  },

  "class (ES2015)": {
    "prefix": "cs",
    "body": "class ${1} {\n\t${0}\n}"
  },
  "class extends (ES2015)": {
    "prefix": "cse",
    "body": "class ${1} extends ${2:base} {\n\t${0}\n}"
  },
  "class constructor (ES2015)": {
    "prefix": "cst",
    "body": "constructor(${1}) {${0}}"
  },
  "method (ES2015)": {
    "prefix": "csm",
    "body": "${1:name}(${2}) {${0}}"
  },
  "async method (ES2015)": {
    "prefix": "csma",
    "body": "async ${1:name}(${2}) {${0}}"
  },
  "getter (ES2015)": {
    "prefix": "gter",
    "body": "get ${1:property}() {${0}}"
  },
  "setter (ES2015)": {
    "prefix": "ster",
    "body": "set ${1:property}(${2:value}) {${0}}"
  },
  "getter and setter (ES2015)": {
    "prefix": "gs",
    "body": "get ${1:property}() {${0}}\n\nset ${1:property}(${2:value}) {}"
  },

  "typeof": {
    "prefix": "tof",
    "body": "typeof ${1:source} === ${0}"
  },
  "instanceof": {
    "prefix": "iof",
    "body": "${1:source} instanceof ${0:Class}"
  },

  "Promise (ES2015)": {
    "prefix": "pr",
    "body": "new Promise(${0})"
  },
  "Promise resolve (ES2015)": {
    "prefix": "prs",
    "body": "Promise.resolve(${1})${0}"
  },
  "Promise reject (ES2015)": {
    "prefix": "prj",
    "body": "Promise.reject(${1})${0}"
  },
  "Promise all (ES2015)": {
    "prefix": "pra",
    "body": "Promise.all(${1})${0}"
  },

  "export (ES2015)": {
    "prefix": "exp",
    "body": "export ${0}"
  },
  "export default (ES2015)": {
    "prefix": "expd",
    "body": "export default ${0}"
  },
  "export as (ES2015)": {
    "prefix": "expas",
    "body": "export ${1} as ${2};${0}"
  },
  "export from (ES2015)": {
    "prefix": "expf",
    "body": "export ${2:name} from '${1}';${0}"
  },
  "export all from (ES2015)": {
    "prefix": "expaf",
    "body": "export *${2} from '${1}';${0}"
  },
  "import module (ES2015)": {
    "prefix": "imp",
    "body": "import ${2:name} from '${1}';${0}"
  },
  "import file (ES2015)": {
    "prefix": "impf",
    "body": "import '${1}';${0}"
  },
  "import module as (ES2015)": {
    "prefix": "impas",
    "body": "import ${2:*} as ${3:name} from '${1}';${0}"
  },

  "Node.js style callback": {
    "prefix": "cb",
    "body": "(err, ${1:response}) => {${0}}"
  },
  "require (Node.JS)": {
    "prefix": "re",
    "body": "require(${1:path})${0}"
  },
  "require assignment (Node.JS)": {
    "prefix": "req",
    "body": "const ${2:name} = require('${1}');${0}"
  },
  "exports.member (Node.JS)": {
    "prefix": "em",
    "body": "exports.${1} = ${2};${0}"
  },
  "module.exports (Node.JS)": {
    "prefix": "me",
    "body": "module.exports = ${1}${0}"
  },
  "event handler": {
    "prefix": "on",
    "body": "on('${1:event}', ${2:callback});${0}"
  },

  "console.log": {
    "prefix": "cl",
    "body": "console.log(${1})${0}"
  },
  "console.error": {
    "prefix": "ce",
    "body": "console.error(${1})${0}"
  },
  "console.warn": {
    "prefix": "cw",
    "body": "console.warn(${1})${0}"
  },
  "console.dir": {
    "prefix": "cd",
    "body": "console.dir(${1})${0}"
  },
  "console.time": {
    "prefix": "ct",
    "body": "console.time('${1}')\n${0}\nconsole.timeEnd('${1}')"
  },

  "setTimeout": {
    "prefix": "sett",
    "body": "setTimeout(${2:callback}, ${1:delay})${0}"
  },
  "setInterval": {
    "prefix": "setin",
    "body": "setInterval(${2:callback}, ${1:delay})${0}"
  },
  "setImmediate": {
    "prefix": "setim",
    "body": "setImmediate(${1:callback}${2})${0}"
  },
  "process nextTick": {
    "prefix": "nt",
    "body": "process.nextTick(${1});${0}"
  },

  "insert 'use strict' statement": {
    "prefix": "us",
    "body": "'use strict';"
  }
}
