{
  "var assignment": {
    "prefix": "va",
    "body": "var $1 = $0",
    "description": "Hyper: var assignment"
  },
  "let assignment (ES2015)": {
    "prefix": "la",
    "body": "let $1 = $0",
    "description": "Hyper: let assignment (ES2015)"
  },
  "const assignment (ES2015)": {
    "prefix": "ca",
    "body": "const $1 = $0",
    "description": "Hyper: const assignment (ES2015)"
  },
  "var destructuring assignment (ES2015)": {
    "prefix": "vad",
    "body": "var ${0:dest} = $1",
    "description": "Hyper: var destructuring assignment (ES2015)"
  },
  "let destructuring assignment (ES2015)": {
    "prefix": "lad",
    "body": "let ${0:dest} = $1",
    "description": "Hyper: let destructuring assignment (ES2015)"
  },
  "const destructuring assignment (ES2015)": {
    "prefix": "cad",
    "body": "const ${0:dest} = $1",
    "description": "Hyper: const destructuring assignment (ES2015)"
  },

  "if statement": {
    "prefix": "if",
    "body": "if ($1) $0",
    "description": "Hyper: if statement"
  },
  "else statement": {
    "prefix": "el",
    "body": "else $0",
    "description": "Hyper: else statement"
  },
  "if/else statement": {
    "prefix": "ifel",
    "body": "if ($1) $2 else $0",
    "description": "Hyper: if/else statement"
  },
  "else if statement": {
    "prefix": "elif",
    "body": "else if ($1) $0",
    "description": "Hyper: else if statement"
  },
  "ternary operator": {
    "prefix": "ter",
    "body": "$1 ? $2 : $0",
    "description": "Hyper: ternary operator"
  },
  "switch case": {
    "prefix": "sw",
    "body": "switch ($1) {\n\tcase $2 : $3\n\tdefault: $0\n}",
    "description": "Hyper: switch case"
  },
  "case": {
    "prefix": "cas",
    "body": "case $1 : $0",
    "description": "Hyper: case"
  },

  "for loop": {
    "prefix": "fo",
    "body": "for ($1 ; $2 ; $3) $0",
    "description": "Hyper: for loop"
  },
  "for in loop": {
    "prefix": "foi",
    "body": "for (const $1 in $2) {\n\tif ($2.hasOwnProperty($1)) {\n\t\t$0\n\t}\n}",
    "description": "Hyper: for in loop"
  },
  "for of loop (ES2015)": {
    "prefix": "fof",
    "body": "for (const $1 of $2) $0",
    "description": "Hyper: for of loop (ES2015)"
  },
  "for await of loop (ES2018)": {
    "prefix": "foa",
    "body": "for await (const $1 of $2) $0",
    "description": "Hyper: for await of loop (ES2018)"
  },
  "while loop": {
    "prefix": "wh",
    "body": "while ($1) $0",
    "description": "Hyper: while loop"
  },
  "try/catch": {
    "prefix": "tc",
    "body": "try {$1} catch $2 {$0}",
    "description": "Hyper: try/catch"
  },
  "try/finally": {
    "prefix": "tf",
    "body": "try {$1} finally {$0}",
    "description": "Hyper: try/finally"
  },
  "try/catch/finally": {
    "prefix": "tcf",
    "body": "try {$1} catch $2 {$3} finally {$0}",
    "description": "Hyper: try/catch/finally"
  },

  "function": {
    "prefix": "f",
    "body": "function ($1)$2 {$0}",
    "description": "Hyper: function"
  },
  "named/generator function": {
    "prefix": "fn",
    "body": "function $1($2)$3 {$0}",
    "description": "Hyper: named/generator function"
  },
  "async function": {
    "prefix": "fa",
    "body": "async function ($1)$2 {$0}",
    "description": "Hyper: async function"
  },
  "async named/generator function": {
    "prefix": "fna",
    "body": "async function $1($2)$3 {$0}",
    "description": "Hyper: async named/generator function"
  },
  "arrow function (ES2015)": {
    "prefix": "af",
    "body": "($1) => $0",
    "description": "Hyper: arrow function (ES2015)"
  },
  "async arrow function (ES2015)": {
    "prefix": "afa",
    "body": "async ($1) => $0",
    "description": "Hyper: async arrow function (ES2015)"
  },
  "arrow function with return type (ES2015)": {
    "prefix": "ar",
    "body": "($1)$2 => $0",
    "description": "Hyper: arrow function with return type (ES2015)"
  },
  "async arrow function with return type (ES2015)": {
    "prefix": "ara",
    "body": "async ($1)$2 => $0",
    "description": "Hyper: async arrow function with return type (ES2015)"
  },
  "generic/generator arrow function (ES2015)": {
    "prefix": "ag",
    "body": "$1($2)$3 => $0",
    "description": "Hyper: generic/generator arrow function (ES2015)"
  },
  "async generic/generator arrow function (ES2015)": {
    "prefix": "aga",
    "body": "async $1($2)$3 => $0",
    "description": "Hyper: async generic/generator arrow function (ES2015)"
  },
  "immediately-invoked function expression (IIFE)": {
    "prefix": "iife",
    "body": "($2)($1)$0",
    "description": "Hyper: immediately-invoked function expression (IIFE)"
  },
  "parameter destructuring with type (TypeScript)": {
    "prefix": "pd",
    "body": "${0:param} : ${1:type}",
    "description": "Hyper: parameter destructuring with type (TypeScript)"
  },

  "sequence of 0..n": {
    "prefix": "seq",
    "body": "[...Array(${1:length}).keys()]$0",
    "description": "Hyper: sequence of 0..n"
  },

  "object literal": {
    "prefix": "ol",
    "body": "{ $1: $0 }",
    "description": "Hyper: object literal"
  },

  "class (ES2015)": {
    "prefix": "cs",
    "body": "class $1 {\n\t$0\n}",
    "description": "Hyper: class (ES2015)"
  },
  "class extends (ES2015)": {
    "prefix": "cse",
    "body": "class $1 extends ${2:base} {\n\t$0\n}",
    "description": "Hyper: class extends (ES2015)"
  },
  "class constructor (ES2015)": {
    "prefix": "cst",
    "body": "constructor($1) {$0}",
    "description": "Hyper: class constructor (ES2015)"
  },
  "method (ES2015)": {
    "prefix": "csm",
    "body": "${1:name}($2) {$0}",
    "description": "Hyper: method (ES2015)"
  },
  "async method (ES2015)": {
    "prefix": "csma",
    "body": "async ${1:name}($2) {$0}",
    "description": "Hyper: async method (ES2015)"
  },
  "getter (ES2015)": {
    "prefix": "gter",
    "body": "get ${1:property}() {$0}",
    "description": "Hyper: getter (ES2015)"
  },
  "setter (ES2015)": {
    "prefix": "ster",
    "body": "set ${1:property}(${2:value}) {$0}",
    "description": "Hyper: setter (ES2015)"
  },
  "getter and setter (ES2015)": {
    "prefix": "gs",
    "body": "get ${1:property}() {$0}\n\nset ${1:property}(${2:value}) {}",
    "description": "Hyper: getter and setter (ES2015)"
  },

  "typeof": {
    "prefix": "tof",
    "body": "typeof ${1:source} === $0",
    "description": "Hyper: typeof"
  },
  "instanceof": {
    "prefix": "iof",
    "body": "${1:source} instanceof ${0:Class}",
    "description": "Hyper: instanceof"
  },

  "Promise new (ES2015)": {
    "prefix": "pr",
    "body": "new Promise($0)",
    "description": "Hyper: Promise new (ES2015)"
  },
  "Promise resolve (ES2015)": {
    "prefix": "prs",
    "body": "Promise.resolve($1)$0",
    "description": "Hyper: Promise resolve (ES2015)"
  },
  "Promise reject (ES2015)": {
    "prefix": "prj",
    "body": "Promise.reject($1)$0",
    "description": "Hyper: Promise reject (ES2015)"
  },
  "Promise all (ES2015)": {
    "prefix": "pra",
    "body": "Promise.all($1)$0",
    "description": "Hyper: Promise all (ES2015)"
  },  
  "Promise all settled (ES2020)": {
    "prefix": "pras",
    "body": "Promise.allSettled($1)$0",
    "description": "Hyper: Promise all settled (ES2020)"
  },
  "Promise any (ES2021)": {
    "prefix": "prn",
    "body": "Promise.any($1)$0",
    "description": "Hyper: Promise any (ES2021)"
  },
  "Promise type (TypeScript)": {
    "prefix": "prt",
    "body": "Promise<$0>",
    "description": "Hyper: Promise type (TypeScript)"
  },

  "export (ES2015)": {
    "prefix": "exp",
    "body": "export $0",
    "description": "Hyper: export (ES2015)"
  },
  "export default (ES2015)": {
    "prefix": "expd",
    "body": "export default $0",
    "description": "Hyper: export default (ES2015)"
  },
  "export as (ES2015)": {
    "prefix": "expas",
    "body": "export $1 as $2;$0",
    "description": "Hyper: export as (ES2015)"
  },
  "export from (ES2015)": {
    "prefix": "expf",
    "body": "export ${2:name} from '$1';$0",
    "description": "Hyper: export from (ES2015)"
  },
  "export all from (ES2015)": {
    "prefix": "expaf",
    "body": "export *$2 from '$1';$0",
    "description": "Hyper: export all from (ES2015)"
  },
  "import module (ES2015)": {
    "prefix": "imp",
    "body": "import ${2:name} from '$1';$0",
    "description": "Hyper: import module (ES2015)"
  },
  "import file (ES2015)": {
    "prefix": "impf",
    "body": "import '$1';$0",
    "description": "Hyper: import file (ES2015)"
  },
  "import module as (ES2015)": {
    "prefix": "impas",
    "body": "import ${2:*} as ${3:name} from '$1';$0",
    "description": "Hyper: import module as (ES2015)"
  },

  "Node.js style callback": {
    "prefix": "cb",
    "body": "(err, ${1:response}) => {$0}",
    "description": "Hyper: Node.js style callback"
  },
  "require (Node.JS)": {
    "prefix": "re",
    "body": "require(${1:path})$0",
    "description": "Hyper: require (Node.JS)"
  },
  "require assignment (Node.JS)": {
    "prefix": "req",
    "body": "const ${2:name} = require('$1');$0",
    "description": "Hyper: require assignment (Node.JS)"
  },
  "exports.member (Node.JS)": {
    "prefix": "em",
    "body": "exports.$1 = $2;$0",
    "description": "Hyper: exports.member (Node.JS)"
  },
  "module.exports (Node.JS)": {
    "prefix": "me",
    "body": "module.exports = $1$0",
    "description": "Hyper: module.exports (Node.JS)"
  },
  "event handler": {
    "prefix": "on",
    "body": "on('${1:event}', ${2:callback});$0",
    "description": "Hyper: event handler"
  },

  "console.log": {
    "prefix": "cl",
    "body": "console.log($1)$0",
    "description": "Hyper: console.log"
  },
  "console.error": {
    "prefix": "ce",
    "body": "console.error($1)$0",
    "description": "Hyper: console.error"
  },
  "console.warn": {
    "prefix": "cw",
    "body": "console.warn($1)$0",
    "description": "Hyper: console.warn"
  },
  "console.dir": {
    "prefix": "cd",
    "body": "console.dir($1)$0",
    "description": "Hyper: console.dir"
  },
  "console.time": {
    "prefix": "ct",
    "body": "console.time('$1')\n$0\nconsole.timeEnd('$1')",
    "description": "Hyper: console.time"
  },

  "setTimeout": {
    "prefix": "sett",
    "body": "setTimeout(${2:callback}, ${1:delay})$0",
    "description": "Hyper: setTimeout"
  },
  "setInterval": {
    "prefix": "setin",
    "body": "setInterval(${2:callback}, ${1:delay})$0",
    "description": "Hyper: setInterval"
  },
  "setImmediate": {
    "prefix": "setim",
    "body": "setImmediate(${1:callback}$2)$0",
    "description": "Hyper: setImmediate"
  },
  "process nextTick": {
    "prefix": "nt",
    "body": "process.nextTick($1);$0",
    "description": "Hyper: process nextTick"
  },

  "insert 'use strict' statement": {
    "prefix": "us",
    "body": "'use strict';",
    "description": "Hyper: insert 'use strict' statement"
  },

  "type (TypeScript)": {
    "prefix": "typ",
    "scope": "typescript",
    "body": "type ${1:name} = $0",
    "description": "Hyper: type (TypeScript)"
  },
  "interface (TypeScript)": {
    "prefix": "int",
    "scope": "typescript",
    "body": "interface ${1:name} {$2}$0",
    "description": "Hyper: interface (TypeScript)"
  },
  "enum (TypeScript)": {
    "prefix": "enu",
    "scope": "typescript",
    "body": "enum ${1:name} {$2}$0",
    "description": "Hyper: enum (TypeScript)"
  },
  "const enum (TypeScript)": {
    "prefix": "enc",
    "scope": "typescript",
    "body": "const enum ${1:name} {$2}$0",
    "description": "Hyper: const enum (TypeScript)"
  },
  "module (TypeScript)": {
    "prefix": "mod",
    "scope": "typescript",
    "body": "module ${1:name} {$2}$0",
    "description": "Hyper: module (TypeScript)"
  },
  "namespace (TypeScript)": {
    "prefix": "nam",
    "scope": "typescript",
    "body": "namespace ${1:name} {$2}$0",
    "description": "Hyper: namespace (TypeScript)"
  }
}
